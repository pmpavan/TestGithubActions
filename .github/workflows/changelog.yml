name: 'CHangelog'
on:
  push:
    tags:
      - '*'

jobs:
  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

#      - name: Verify tag is from master
#        id: check_master
#        run: |
#          # Fetch the master branch
#          git fetch origin master:master
#          # Check if the tag is on the master branch
#          if git merge-base --is-ancestor master HEAD; then
#            echo "is_master=true" >> $GITHUB_ENV
#          else
#            echo "is_master=false" >> $GITHUB_ENV
#
#      - name: Exit if not from master
#        if: env.is_master == 'false'
#        run: exit 0

      - name: Verify repository
        run: ls -la

      - name: Build Changelog
        id: github_release
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          commitMode: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: mikepenz/action-gh-release@v0.2.0-a03 #softprops/action-gh-release
        with:
          body: ${{steps.github_release.outputs.changelog}}

      # Append or create content for changelog.md
      - name: Update changelog
        run: |
          echo "## New Changes\n" >> changelog.md
          echo ${{steps.build_changelog.outputs.changelog}} >> changelog.md

#      - name: Get release description
#        id: get_release_description
#        run: |
#          tag_name="${GITHUB_REF#refs/tags/}"
#          release_id=$(curl -sSL -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/$tag_name" | jq -r '.id')
#          release_description=$(curl -sSL -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/$release_id" | jq -r '.body')
#          echo "::set-output name=release_description::$release_description"
#
#
#      - name: List pull requests associated with the tag
#        id: list_prs
#        run: |
#          tag_name="${GITHUB_REF#refs/tags/}"
#          git fetch origin "refs/tags/$tag_name"
#          git log --merges --pretty=format:"%s" "$(git describe --tags --abbrev=0 --exact-match "$tag_name")^..$(git describe --tags --abbrev=0 --exact-match "$tag_name")" > prs.txt
#          if [ ! -s prs.txt ]; then
#            echo "No pull requests associated with the tag."
#            exit 1
#          fi
#
#      - name: Generate release notes
#        id: release_notes
#        run: |
#          echo "## Release Notes" > release_notes.md
#          echo "" >> release_notes.md
#          echo "${{ steps.get_release_description.outputs.release_description }}" >> release_notes.md
#          echo "" >> release_notes.md
#          echo "## Pull Requests" >> release_notes.md
#          while IFS= read -r line; do
#          echo "- $line" >> release_notes.md
#          done < prs.txt
#          echo "" >> release_notes.md
#          echo "Generated on: $(date)" >> release_notes.md
#          echo "" >> release_notes.md
#          echo "Tag: $tag_name" >> release_notes.md
#          echo "" >> release_notes.md

      # Configure git
      - name: Configure Git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Commit and push changes
        run: |
          git fetch origin
          git checkout master
          git add changelog.md
#          git add release_notes.md
          git commit -m "Update changelog"
          git push origin HEAD:master
        env:
          # Set the environment variable GITHUB_TOKEN to use the GitHub Actions token for authentication
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}